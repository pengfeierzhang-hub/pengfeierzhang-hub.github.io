[{"author":null,"categories":["编程语言"],"content":"了解bean的装载","date":1591228800,"description":"了解bean的装载","dir":"post/","excerpt_html":"了解bean的装载","excerpt_text":"了解bean的装载","expirydate":-62135596800,"fuzzywordcount":600,"html":"了解bean的装载","keywords":null,"kind":"page","lang":"en","lastmod":1591228800,"objectID":"ab37c695400e1d0030bf2e6ee6be47f7","permalink":"https://pengfeierzhang-hub.github.io/post/bean%E7%9A%84%E8%A3%85%E8%BD%BD/","publishdate":"2020-06-04T00:00:00Z","readingtime":2,"relpermalink":"/post/bean%E7%9A%84%E8%A3%85%E8%BD%BD/","section":"post","summary":"将bean进行注册到spring容器中的三种方式 创建一个bean即一个简单的Java对象实体类，或者认为是将一个bean装配到IOC容器中，","tags":["spring","Java"],"title":"bean装载的方式","type":"post","url":"/post/bean%E7%9A%84%E8%A3%85%E8%BD%BD/","weight":0,"wordcount":577},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"flyer的博客","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/java/","section":"tags","summary":"","tags":null,"title":"Java","type":"tags","url":"/tags/java/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/spring/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/spring/","section":"tags","summary":"","tags":null,"title":"spring","type":"tags","url":"/tags/spring/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591228800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1591228800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","section":"categories","summary":"","tags":null,"title":"编程语言","type":"categories","url":"/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591142400,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1591142400,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/categories/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/algorithm/","section":"categories","summary":"","tags":null,"title":"Algorithm","type":"categories","url":"/categories/algorithm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1591142400,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1591142400,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/algorithm/","section":"tags","summary":"","tags":null,"title":"algorithm","type":"tags","url":"/tags/algorithm/","weight":0,"wordcount":0},{"author":null,"categories":["Algorithm"],"content":"熟悉二分查找的不同的使用场景","date":1591142400,"description":"熟悉二分查找的不同的使用场景","dir":"post/算法和数据结构/","excerpt_html":"熟悉二分查找的不同的使用场景","excerpt_text":"熟悉二分查找的不同的使用场景","expirydate":-62135596800,"fuzzywordcount":1700,"html":"熟悉二分查找的不同的使用场景","keywords":null,"kind":"page","lang":"en","lastmod":1591142400,"objectID":"45fa1e424e38ac835dfad4ee9fa26183","permalink":"https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","publishdate":"2020-06-03T00:00:00Z","readingtime":4,"relpermalink":"/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","section":"post","summary":"问题定义：如何不死记二分的写法 以下的讨论都是基于问题的解是存在的前提下。 场景一：在一个有序的数组中寻找某个下标使得其对应的值等于某个指定的t","tags":["algorithm"],"title":"二分查找的模板代码","type":"post","url":"/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","weight":0,"wordcount":1626},{"author":null,"categories":["Algorithm"],"content":"深度搜索的解题过程","date":1591142400,"description":"深度搜索的解题过程","dir":"post/算法和数据结构/","excerpt_html":"深度搜索的解题过程","excerpt_text":"深度搜索的解题过程","expirydate":-62135596800,"fuzzywordcount":300,"html":"深度搜索的解题过程","keywords":null,"kind":"page","lang":"en","lastmod":1591142400,"objectID":"c001fa7d20afada7c0fb33a5491a2e66","permalink":"https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/","publishdate":"2020-06-03T00:00:00Z","readingtime":1,"relpermalink":"/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/","section":"post","summary":"深度搜索问题的代码模板 对于if的判定条件，如果判定过程比较复杂的话，要封装成isOk()k函数，一般来说深度搜索的问题，关键点在于isOk函","tags":["algorithm"],"title":"深度搜索的思想","type":"post","url":"/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/","weight":0,"wordcount":253},{"author":null,"categories":["Algorithm"],"content":"讲述滑动窗口的一些解题技巧","date":1586390400,"description":"讲述滑动窗口的一些解题技巧","dir":"post/","excerpt_html":"讲述滑动窗口的一些解题技巧","excerpt_text":"讲述滑动窗口的一些解题技巧","expirydate":-62135596800,"fuzzywordcount":1400,"html":"讲述滑动窗口的一些解题技巧","keywords":null,"kind":"page","lang":"en","lastmod":1586390400,"objectID":"a1685f2d2b0824bcb6df407d0006fb87","permalink":"https://pengfeierzhang-hub.github.io/post/slide_window/","publishdate":"2020-04-09T00:00:00Z","readingtime":3,"relpermalink":"/post/slide_window/","section":"post","summary":"什么是滑动窗口？ 滑动窗口在算法题中的应用主要是依靠双指针来实现。在滑动窗口类型的问题中都会有两个指针。一个用于延伸现有窗口的 right指针，","tags":["algorithm"],"title":"滑动窗口的技巧解题","type":"post","url":"/post/slide_window/","weight":0,"wordcount":1361},{"author":null,"categories":null,"content":null,"date":1586362465,"description":"","dir":"/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1586362465,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://pengfeierzhang-hub.github.io/about/","publishdate":"2020-04-09T00:14:25+08:00","readingtime":1,"relpermalink":"/about/","section":"","summary":"这是我的博客！","tags":null,"title":"About","type":"page","url":"/about/","weight":0,"wordcount":7},{"author":null,"categories":["Algorithm"],"content":"动态规划的解题思想","date":1586304000,"description":"动态规划的解题思想","dir":"post/","excerpt_html":"动态规划的解题思想","excerpt_text":"动态规划的解题思想","expirydate":-62135596800,"fuzzywordcount":600,"html":"动态规划的解题思想","keywords":null,"kind":"page","lang":"en","lastmod":1586304000,"objectID":"72a54093b13861d65bc821ddb8913c16","permalink":"https://pengfeierzhang-hub.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","publishdate":"2020-04-08T00:00:00Z","readingtime":2,"relpermalink":"/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","section":"post","summary":"通常解决并理解一个动态规划问题需要以下 4 个步骤： - 利用递归回溯解决问题 - 利用记忆表优化（自顶向下的动态规划） - 移除递归的部分（自底向上的动态","tags":["algorithm"],"title":"动态规划的思想","type":"post","url":"/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","weight":0,"wordcount":511},{"author":null,"categories":["Algorithm"],"content":"贪心的解题思想","date":1586304000,"description":"贪心的解题思想","dir":"post/","excerpt_html":"贪心的解题思想","excerpt_text":"贪心的解题思想","expirydate":-62135596800,"fuzzywordcount":200,"html":"贪心的解题思想","keywords":null,"kind":"page","lang":"en","lastmod":1586304000,"objectID":"287c10f8f3231a08726baee1f68b7ff2","permalink":"https://pengfeierzhang-hub.github.io/post/%E8%B4%AA%E5%BF%83/","publishdate":"2020-04-08T00:00:00Z","readingtime":1,"relpermalink":"/post/%E8%B4%AA%E5%BF%83/","section":"post","summary":"Z国的货币系统包含面值1元、4元、16元、64元共计4种硬币，以及面值1024元的纸币。现在小Y使用1024元的纸币购买了一件价值为N N(0","tags":["algorithm"],"title":"贪心","type":"post","url":"/post/%E8%B4%AA%E5%BF%83/","weight":0,"wordcount":185},{"author":null,"categories":["Algorithm"],"content":"机器学习之交叉熵","date":1575331200,"description":"机器学习之交叉熵","dir":"post/","excerpt_html":"机器学习之交叉熵","excerpt_text":"机器学习之交叉熵","expirydate":-62135596800,"fuzzywordcount":400,"html":"机器学习之交叉熵","keywords":null,"kind":"page","lang":"en","lastmod":1575331200,"objectID":"1869904ccb1013ddf52221889b8a3e5c","permalink":"https://pengfeierzhang-hub.github.io/post/entropy/","publishdate":"2019-12-03T00:00:00Z","readingtime":1,"relpermalink":"/post/entropy/","section":"post","summary":"损失函数: 交叉熵 1.熵: 该概念了来源于信息论中，用来衡量信心的不确定程度。熵在信息论中也称为信息熵或者香农熵，熵越大代表不确定性越大。对所有","tags":["algorithm"],"title":"交叉熵","type":"post","url":"/post/entropy/","weight":0,"wordcount":308},{"author":null,"categories":null,"content":null,"date":1575281781,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1575281781,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/python/","section":"tags","summary":"","tags":null,"title":"python","type":"tags","url":"/tags/python/","weight":0,"wordcount":0},{"author":null,"categories":["编程语言"],"content":"Python特性","date":1575281781,"description":"Python特性","dir":"post/","excerpt_html":"Python特性","excerpt_text":"Python特性","expirydate":-62135596800,"fuzzywordcount":100,"html":"Python特性","keywords":null,"kind":"page","lang":"en","lastmod":1575281781,"objectID":"2cbe96c489d2377e576921e8a943fa79","permalink":"https://pengfeierzhang-hub.github.io/post/myblog/","publishdate":"2019-12-02T18:16:21+08:00","readingtime":1,"relpermalink":"/post/myblog/","section":"post","summary":"什么是鸭子类型 一个数据类型只要他具有某种行为，它就认是某种类型，它看起来像鸭子，它就是鸭子","tags":["python"],"title":"python的鸭子类型","type":"post","url":"/post/myblog/","weight":0,"wordcount":45},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"post/Spring/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"451cf5e55fe0cb82481a11e1f115a7dd","permalink":"https://pengfeierzhang-hub.github.io/post/spring/java%E7%9A%84volatile/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/spring/java%E7%9A%84volatile/","section":"post","summary":"请讲述下volatile关键字  他是轻量的synchronized 在多处理其开发中保证了共享变量的可见性 可见性就是当一个线程进行修改一个共享变量的时候，另外一个线程能读到这个修改的值。保证将变量的更新操作通知到其他的线程。 如果该关键字使用恰当，那么效率比synchronized较好，应为不会引起线程的上下文切换和调度。 volatile 关键字能保证内存的可见性，但是不能保证原子性\n什么叫做线程的上下文切换： 多线程会共同使用一组计算机上的CPU，而线程数大于给程序分配的CPU数量时，为了让各个线程都有执行的机会，就需要轮流使用CPU。利用时间片轮转的方式，CPU给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一个任务后，继续服务下一个任务，这个过程叫做上下文切换。即对于单核CPU，CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换。\n从操作系统的角度来理解指令重排序指令重排序参考 指令重排序的定义 在虚拟机层面，**为了尽可能减少内存操作速度远慢于CPU运行速度所带来的CPU空置的影响，虚拟机会按照自己的一些规则(这规则后面再叙述)将程序编写顺序打乱——即写在后面的代码在时间顺序上可能会先执行，而写在前面的代码会后执行——以尽可能充分地利用CPU\n首先需要看一下一个指令重排序的场景: class ResortDemo { int a = 0; boolean flag = false; public void writer() { a = 1; //1 flag = true; //2 } Public void reader() { if (flag) { //3 int i = a * a; //4 …… } } }   当两个线程 A 和 B，A 首先执行writer() 方法，随后 B 线程接着执行 reader() 方法。线程B在执行操作4时，能否看到线程 A 在操作1对共享变量 a 的写入？","tags":null,"title":"","type":"post","url":"/post/spring/java%E7%9A%84volatile/","weight":0,"wordcount":163},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://pengfeierzhang-hub.github.io/tags/data-structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/data-structure/","section":"tags","summary":"","tags":null,"title":"data structure","type":"tags","url":"/tags/data-structure/","weight":0,"wordcount":0},{"author":null,"categories":["Algorithm"],"content":"讲述空间换时间之前缀和","date":-62135596800,"description":"讲述空间换时间之前缀和","dir":"post/","excerpt_html":"讲述空间换时间之前缀和","excerpt_text":"讲述空间换时间之前缀和","expirydate":-62135596800,"fuzzywordcount":300,"html":"讲述空间换时间之前缀和","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c7466c12b44f94955f8a2c803119b569","permalink":"https://pengfeierzhang-hub.github.io/post/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/","section":"post","summary":"一维前缀和数组 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(int argc, char *argv[]) { vector\u0026lt;int\u0026gt; arr = {1, 2, 3, 4, 5}; int n = arr.size(); vector\u0026lt;int\u0026gt; sum(n, 0); sum[0] = arr[0]; for(int i=1; i\u0026lt;n; i++){ sum[i] = sum[i-1] + arr[i]; cout\u0026lt;\u0026lt;sum[i]\u0026lt;\u0026lt;\u0026quot; \u0026quot;; } //如果要是求（i，j）之间的元素和 //int res","tags":["algorithm","data structure"],"title":"前缀和数组","type":"post","url":"/post/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/","weight":0,"wordcount":244},{"author":null,"categories":["Algorithm"],"content":"分析建堆的时间复杂度","date":-62135596800,"description":"分析建堆的时间复杂度","dir":"post/","excerpt_html":"分析建堆的时间复杂度","excerpt_text":"分析建堆的时间复杂度","expirydate":-62135596800,"fuzzywordcount":1300,"html":"分析建堆的时间复杂度","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"67eec013c3a24a55d6e89d74a3d7f5dc","permalink":"https://pengfeierzhang-hub.github.io/post/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/post/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B/","section":"post","summary":"堆排序的第一步：建堆过程时间度是O(n)。 以升序为例，我们知道对于堆排序的第一步，是要先建立一个大顶堆。代码如下: void adjustHeap(vector\u0026lt;int\u0026gt;\u0026amp; arr, int parent, int length){ int temp = arr","tags":["algorithm","data structure"],"title":"堆排序的建堆过程","type":"post","url":"/post/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B/","weight":0,"wordcount":1215},{"author":null,"categories":["编程语言"],"content":"使用Python进行一些简单的数据处理","date":-62135596800,"description":"使用Python进行一些简单的数据处理","dir":"post/","excerpt_html":"使用Python进行一些简单的数据处理","excerpt_text":"使用Python进行一些简单的数据处理","expirydate":-62135596800,"fuzzywordcount":100,"html":"使用Python进行一些简单的数据处理","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9bd7714aa7b59d1d21d69035fb5cd339","permalink":"https://pengfeierzhang-hub.github.io/post/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","section":"post","summary":"使用pandas进行数据处理","tags":["python"],"title":"数据处理","type":"post","url":"/post/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","weight":0,"wordcount":14}]