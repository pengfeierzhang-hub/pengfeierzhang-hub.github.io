<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on flyer的博客</title>
    <link>https://pengfeierzhang-hub.github.io/post/</link>
    <description>Recent content in Posts on flyer的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pengfeierzhang-hub.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bean装载的方式</title>
      <link>https://pengfeierzhang-hub.github.io/post/bean%E7%9A%84%E8%A3%85%E8%BD%BD/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/bean%E7%9A%84%E8%A3%85%E8%BD%BD/</guid>
      <description>将bean进行注册到spring容器中的三种方式 创建一个bean即一个简单的Java对象实体类，或者认为是将一个bean装配到IOC容器中，</description>
    </item>
    
    <item>
      <title>二分查找的模板代码</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>问题定义：如何不死记二分的写法 以下的讨论都是基于问题的解是存在的前提下。 场景一：在一个有序的数组中寻找某个下标使得其对应的值等于某个指定的t</description>
    </item>
    
    <item>
      <title>深度搜索的思想</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/</guid>
      <description>深度搜索问题的代码模板 对于if的判定条件，如果判定过程比较复杂的话，要封装成isOk()k函数，一般来说深度搜索的问题，关键点在于isOk函</description>
    </item>
    
    <item>
      <title>滑动窗口的技巧解题</title>
      <link>https://pengfeierzhang-hub.github.io/post/slide_window/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/slide_window/</guid>
      <description>什么是滑动窗口？ 滑动窗口在算法题中的应用主要是依靠双指针来实现。在滑动窗口类型的问题中都会有两个指针。一个用于延伸现有窗口的 right指针，</description>
    </item>
    
    <item>
      <title>动态规划的思想</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>通常解决并理解一个动态规划问题需要以下 4 个步骤： - 利用递归回溯解决问题 - 利用记忆表优化（自顶向下的动态规划） - 移除递归的部分（自底向上的动态</description>
    </item>
    
    <item>
      <title>贪心</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E8%B4%AA%E5%BF%83/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E8%B4%AA%E5%BF%83/</guid>
      <description>Z国的货币系统包含面值1元、4元、16元、64元共计4种硬币，以及面值1024元的纸币。现在小Y使用1024元的纸币购买了一件价值为N N(0</description>
    </item>
    
    <item>
      <title>交叉熵</title>
      <link>https://pengfeierzhang-hub.github.io/post/entropy/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/entropy/</guid>
      <description>损失函数: 交叉熵 1.熵: 该概念了来源于信息论中，用来衡量信心的不确定程度。熵在信息论中也称为信息熵或者香农熵，熵越大代表不确定性越大。对所有</description>
    </item>
    
    <item>
      <title>python的鸭子类型</title>
      <link>https://pengfeierzhang-hub.github.io/post/myblog/</link>
      <pubDate>Mon, 02 Dec 2019 18:16:21 +0800</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/myblog/</guid>
      <description>什么是鸭子类型 一个数据类型只要他具有某种行为，它就认是某种类型，它看起来像鸭子，它就是鸭子</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pengfeierzhang-hub.github.io/post/spring/java%E7%9A%84volatile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/spring/java%E7%9A%84volatile/</guid>
      <description>请讲述下volatile关键字  他是轻量的synchronized 在多处理其开发中保证了共享变量的可见性 可见性就是当一个线程进行修改一个共享变量的时候，另外一个线程能读到这个修改的值。保证将变量的更新操作通知到其他的线程。 如果该关键字使用恰当，那么效率比synchronized较好，应为不会引起线程的上下文切换和调度。 volatile 关键字能保证内存的可见性，但是不能保证原子性
什么叫做线程的上下文切换： 多线程会共同使用一组计算机上的CPU，而线程数大于给程序分配的CPU数量时，为了让各个线程都有执行的机会，就需要轮流使用CPU。利用时间片轮转的方式，CPU给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一个任务后，继续服务下一个任务，这个过程叫做上下文切换。即对于单核CPU，CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换。
从操作系统的角度来理解指令重排序指令重排序参考 指令重排序的定义 在虚拟机层面，**为了尽可能减少内存操作速度远慢于CPU运行速度所带来的CPU空置的影响，虚拟机会按照自己的一些规则(这规则后面再叙述)将程序编写顺序打乱——即写在后面的代码在时间顺序上可能会先执行，而写在前面的代码会后执行——以尽可能充分地利用CPU
首先需要看一下一个指令重排序的场景: class ResortDemo { int a = 0; boolean flag = false; public void writer() { a = 1; //1 flag = true; //2 } Public void reader() { if (flag) { //3 int i = a * a; //4 …… } } }   当两个线程 A 和 B，A 首先执行writer() 方法，随后 B 线程接着执行 reader() 方法。线程B在执行操作4时，能否看到线程 A 在操作1对共享变量 a 的写入？</description>
    </item>
    
    <item>
      <title>前缀和数组</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>一维前缀和数组 #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; int main(int argc, char *argv[]) { vector&amp;lt;int&amp;gt; arr = {1, 2, 3, 4, 5}; int n = arr.size(); vector&amp;lt;int&amp;gt; sum(n, 0); sum[0] = arr[0]; for(int i=1; i&amp;lt;n; i++){ sum[i] = sum[i-1] + arr[i]; cout&amp;lt;&amp;lt;sum[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;; } //如果要是求（i，j）之间的元素和 //int res</description>
    </item>
    
    <item>
      <title>堆排序的建堆过程</title>
      <link>https://pengfeierzhang-hub.github.io/post/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BB%BA%E5%A0%86%E8%BF%87%E7%A8%8B/</guid>
      <description>堆排序的第一步：建堆过程时间度是O(n)。 以升序为例，我们知道对于堆排序的第一步，是要先建立一个大顶堆。代码如下: void adjustHeap(vector&amp;lt;int&amp;gt;&amp;amp; arr, int parent, int length){ int temp = arr</description>
    </item>
    
    <item>
      <title>数据处理</title>
      <link>https://pengfeierzhang-hub.github.io/post/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pengfeierzhang-hub.github.io/post/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</guid>
      <description>使用pandas进行数据处理</description>
    </item>
    
  </channel>
</rss>